// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: pb/admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Login_FullMethodName         = "/pb.user/login"
	User_Register_FullMethodName      = "/pb.user/register"
	User_CurrentUser_FullMethodName   = "/pb.user/currentUser"
	User_Logout_FullMethodName        = "/pb.user/logout"
	User_GetInvokeUser_FullMethodName = "/pb.user/getInvokeUser"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	GetInvokeUser(ctx context.Context, in *GetInvokeUserReq, opts ...grpc.CallOption) (*GetInvokeUserResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserResp, error) {
	out := new(CurrentUserResp)
	err := c.cc.Invoke(ctx, User_CurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, User_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetInvokeUser(ctx context.Context, in *GetInvokeUserReq, opts ...grpc.CallOption) (*GetInvokeUserResp, error) {
	out := new(GetInvokeUserResp)
	err := c.cc.Invoke(ctx, User_GetInvokeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	CurrentUser(context.Context, *CurrentUserReq) (*CurrentUserResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	GetInvokeUser(context.Context, *GetInvokeUserReq) (*GetInvokeUserResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) CurrentUser(context.Context, *CurrentUserReq) (*CurrentUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) GetInvokeUser(context.Context, *GetInvokeUserReq) (*GetInvokeUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvokeUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CurrentUser(ctx, req.(*CurrentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetInvokeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvokeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetInvokeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetInvokeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetInvokeUser(ctx, req.(*GetInvokeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "currentUser",
			Handler:    _User_CurrentUser_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "getInvokeUser",
			Handler:    _User_GetInvokeUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/admin.proto",
}

const (
	InterfaceInfo_AddInterfaceInfo_FullMethodName           = "/pb.interfaceInfo/addInterfaceInfo"
	InterfaceInfo_UpdateInterfaceInfo_FullMethodName        = "/pb.interfaceInfo/updateInterfaceInfo"
	InterfaceInfo_DeleteInterfaceInfo_FullMethodName        = "/pb.interfaceInfo/deleteInterfaceInfo"
	InterfaceInfo_GetInterfaceInfo_FullMethodName           = "/pb.interfaceInfo/getInterfaceInfo"
	InterfaceInfo_GetPageList_FullMethodName                = "/pb.interfaceInfo/getPageList"
	InterfaceInfo_OnlineInterfaceInfo_FullMethodName        = "/pb.interfaceInfo/onlineInterfaceInfo"
	InterfaceInfo_OfflineInterfaceInfo_FullMethodName       = "/pb.interfaceInfo/offlineInterfaceInfo"
	InterfaceInfo_InvokeInterfaceInfo_FullMethodName        = "/pb.interfaceInfo/invokeInterfaceInfo"
	InterfaceInfo_InvokeInterfaceCount_FullMethodName       = "/pb.interfaceInfo/invokeInterfaceCount"
	InterfaceInfo_GetTopNInvokeInterfaceInfo_FullMethodName = "/pb.interfaceInfo/getTopNInvokeInterfaceInfo"
)

// InterfaceInfoClient is the client API for InterfaceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceInfoClient interface {
	AddInterfaceInfo(ctx context.Context, in *AddInterfaceInfoReq, opts ...grpc.CallOption) (*AddInterfaceInfoResp, error)
	UpdateInterfaceInfo(ctx context.Context, in *UpdateInterfaceInfoReq, opts ...grpc.CallOption) (*UpdateInterfaceInfoResp, error)
	DeleteInterfaceInfo(ctx context.Context, in *DeleteInterfaceInfoReq, opts ...grpc.CallOption) (*DeleteInterfaceInfoResp, error)
	GetInterfaceInfo(ctx context.Context, in *GetInterfaceInfoReq, opts ...grpc.CallOption) (*GetInterfaceInfoResp, error)
	GetPageList(ctx context.Context, in *PageListReq, opts ...grpc.CallOption) (*PageListResp, error)
	OnlineInterfaceInfo(ctx context.Context, in *OnlineInterfaceInfoReq, opts ...grpc.CallOption) (*OnlineInterfaceInfoResp, error)
	OfflineInterfaceInfo(ctx context.Context, in *OfflineInterfaceInfoReq, opts ...grpc.CallOption) (*OfflineInterfaceInfoResp, error)
	InvokeInterfaceInfo(ctx context.Context, in *InvokeInterfaceInfoReq, opts ...grpc.CallOption) (*InvokeInterfaceInfoResp, error)
	InvokeInterfaceCount(ctx context.Context, in *UpdateInvokeInterfaceCountReq, opts ...grpc.CallOption) (*UpdateInvokeInterfaceCountResp, error)
	GetTopNInvokeInterfaceInfo(ctx context.Context, in *GetTopNInvokeInterfaceInfoReq, opts ...grpc.CallOption) (*GetTopNInvokeInterfaceInfoResp, error)
}

type interfaceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceInfoClient(cc grpc.ClientConnInterface) InterfaceInfoClient {
	return &interfaceInfoClient{cc}
}

func (c *interfaceInfoClient) AddInterfaceInfo(ctx context.Context, in *AddInterfaceInfoReq, opts ...grpc.CallOption) (*AddInterfaceInfoResp, error) {
	out := new(AddInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_AddInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) UpdateInterfaceInfo(ctx context.Context, in *UpdateInterfaceInfoReq, opts ...grpc.CallOption) (*UpdateInterfaceInfoResp, error) {
	out := new(UpdateInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_UpdateInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) DeleteInterfaceInfo(ctx context.Context, in *DeleteInterfaceInfoReq, opts ...grpc.CallOption) (*DeleteInterfaceInfoResp, error) {
	out := new(DeleteInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_DeleteInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) GetInterfaceInfo(ctx context.Context, in *GetInterfaceInfoReq, opts ...grpc.CallOption) (*GetInterfaceInfoResp, error) {
	out := new(GetInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_GetInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) GetPageList(ctx context.Context, in *PageListReq, opts ...grpc.CallOption) (*PageListResp, error) {
	out := new(PageListResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_GetPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) OnlineInterfaceInfo(ctx context.Context, in *OnlineInterfaceInfoReq, opts ...grpc.CallOption) (*OnlineInterfaceInfoResp, error) {
	out := new(OnlineInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_OnlineInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) OfflineInterfaceInfo(ctx context.Context, in *OfflineInterfaceInfoReq, opts ...grpc.CallOption) (*OfflineInterfaceInfoResp, error) {
	out := new(OfflineInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_OfflineInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) InvokeInterfaceInfo(ctx context.Context, in *InvokeInterfaceInfoReq, opts ...grpc.CallOption) (*InvokeInterfaceInfoResp, error) {
	out := new(InvokeInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_InvokeInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) InvokeInterfaceCount(ctx context.Context, in *UpdateInvokeInterfaceCountReq, opts ...grpc.CallOption) (*UpdateInvokeInterfaceCountResp, error) {
	out := new(UpdateInvokeInterfaceCountResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_InvokeInterfaceCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInfoClient) GetTopNInvokeInterfaceInfo(ctx context.Context, in *GetTopNInvokeInterfaceInfoReq, opts ...grpc.CallOption) (*GetTopNInvokeInterfaceInfoResp, error) {
	out := new(GetTopNInvokeInterfaceInfoResp)
	err := c.cc.Invoke(ctx, InterfaceInfo_GetTopNInvokeInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceInfoServer is the server API for InterfaceInfo service.
// All implementations must embed UnimplementedInterfaceInfoServer
// for forward compatibility
type InterfaceInfoServer interface {
	AddInterfaceInfo(context.Context, *AddInterfaceInfoReq) (*AddInterfaceInfoResp, error)
	UpdateInterfaceInfo(context.Context, *UpdateInterfaceInfoReq) (*UpdateInterfaceInfoResp, error)
	DeleteInterfaceInfo(context.Context, *DeleteInterfaceInfoReq) (*DeleteInterfaceInfoResp, error)
	GetInterfaceInfo(context.Context, *GetInterfaceInfoReq) (*GetInterfaceInfoResp, error)
	GetPageList(context.Context, *PageListReq) (*PageListResp, error)
	OnlineInterfaceInfo(context.Context, *OnlineInterfaceInfoReq) (*OnlineInterfaceInfoResp, error)
	OfflineInterfaceInfo(context.Context, *OfflineInterfaceInfoReq) (*OfflineInterfaceInfoResp, error)
	InvokeInterfaceInfo(context.Context, *InvokeInterfaceInfoReq) (*InvokeInterfaceInfoResp, error)
	InvokeInterfaceCount(context.Context, *UpdateInvokeInterfaceCountReq) (*UpdateInvokeInterfaceCountResp, error)
	GetTopNInvokeInterfaceInfo(context.Context, *GetTopNInvokeInterfaceInfoReq) (*GetTopNInvokeInterfaceInfoResp, error)
	mustEmbedUnimplementedInterfaceInfoServer()
}

// UnimplementedInterfaceInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceInfoServer struct {
}

func (UnimplementedInterfaceInfoServer) AddInterfaceInfo(context.Context, *AddInterfaceInfoReq) (*AddInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) UpdateInterfaceInfo(context.Context, *UpdateInterfaceInfoReq) (*UpdateInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) DeleteInterfaceInfo(context.Context, *DeleteInterfaceInfoReq) (*DeleteInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) GetInterfaceInfo(context.Context, *GetInterfaceInfoReq) (*GetInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) GetPageList(context.Context, *PageListReq) (*PageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageList not implemented")
}
func (UnimplementedInterfaceInfoServer) OnlineInterfaceInfo(context.Context, *OnlineInterfaceInfoReq) (*OnlineInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) OfflineInterfaceInfo(context.Context, *OfflineInterfaceInfoReq) (*OfflineInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) InvokeInterfaceInfo(context.Context, *InvokeInterfaceInfoReq) (*InvokeInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) InvokeInterfaceCount(context.Context, *UpdateInvokeInterfaceCountReq) (*UpdateInvokeInterfaceCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeInterfaceCount not implemented")
}
func (UnimplementedInterfaceInfoServer) GetTopNInvokeInterfaceInfo(context.Context, *GetTopNInvokeInterfaceInfoReq) (*GetTopNInvokeInterfaceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopNInvokeInterfaceInfo not implemented")
}
func (UnimplementedInterfaceInfoServer) mustEmbedUnimplementedInterfaceInfoServer() {}

// UnsafeInterfaceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceInfoServer will
// result in compilation errors.
type UnsafeInterfaceInfoServer interface {
	mustEmbedUnimplementedInterfaceInfoServer()
}

func RegisterInterfaceInfoServer(s grpc.ServiceRegistrar, srv InterfaceInfoServer) {
	s.RegisterService(&InterfaceInfo_ServiceDesc, srv)
}

func _InterfaceInfo_AddInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).AddInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_AddInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).AddInterfaceInfo(ctx, req.(*AddInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_UpdateInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).UpdateInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_UpdateInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).UpdateInterfaceInfo(ctx, req.(*UpdateInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_DeleteInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).DeleteInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_DeleteInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).DeleteInterfaceInfo(ctx, req.(*DeleteInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_GetInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).GetInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_GetInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).GetInterfaceInfo(ctx, req.(*GetInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_GetPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).GetPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_GetPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).GetPageList(ctx, req.(*PageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_OnlineInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).OnlineInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_OnlineInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).OnlineInterfaceInfo(ctx, req.(*OnlineInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_OfflineInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).OfflineInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_OfflineInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).OfflineInterfaceInfo(ctx, req.(*OfflineInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_InvokeInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).InvokeInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_InvokeInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).InvokeInterfaceInfo(ctx, req.(*InvokeInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_InvokeInterfaceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvokeInterfaceCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).InvokeInterfaceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_InvokeInterfaceCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).InvokeInterfaceCount(ctx, req.(*UpdateInvokeInterfaceCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInfo_GetTopNInvokeInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopNInvokeInterfaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInfoServer).GetTopNInvokeInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInfo_GetTopNInvokeInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInfoServer).GetTopNInvokeInterfaceInfo(ctx, req.(*GetTopNInvokeInterfaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InterfaceInfo_ServiceDesc is the grpc.ServiceDesc for InterfaceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.interfaceInfo",
	HandlerType: (*InterfaceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addInterfaceInfo",
			Handler:    _InterfaceInfo_AddInterfaceInfo_Handler,
		},
		{
			MethodName: "updateInterfaceInfo",
			Handler:    _InterfaceInfo_UpdateInterfaceInfo_Handler,
		},
		{
			MethodName: "deleteInterfaceInfo",
			Handler:    _InterfaceInfo_DeleteInterfaceInfo_Handler,
		},
		{
			MethodName: "getInterfaceInfo",
			Handler:    _InterfaceInfo_GetInterfaceInfo_Handler,
		},
		{
			MethodName: "getPageList",
			Handler:    _InterfaceInfo_GetPageList_Handler,
		},
		{
			MethodName: "onlineInterfaceInfo",
			Handler:    _InterfaceInfo_OnlineInterfaceInfo_Handler,
		},
		{
			MethodName: "offlineInterfaceInfo",
			Handler:    _InterfaceInfo_OfflineInterfaceInfo_Handler,
		},
		{
			MethodName: "invokeInterfaceInfo",
			Handler:    _InterfaceInfo_InvokeInterfaceInfo_Handler,
		},
		{
			MethodName: "invokeInterfaceCount",
			Handler:    _InterfaceInfo_InvokeInterfaceCount_Handler,
		},
		{
			MethodName: "getTopNInvokeInterfaceInfo",
			Handler:    _InterfaceInfo_GetTopNInvokeInterfaceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/admin.proto",
}
