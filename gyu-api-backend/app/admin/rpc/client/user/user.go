// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package user

import (
	"context"

	"gyu-api-backend/app/admin/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddInterfaceInfoReq            = pb.AddInterfaceInfoReq
	AddInterfaceInfoResp           = pb.AddInterfaceInfoResp
	CurrentUserReq                 = pb.CurrentUserReq
	CurrentUserResp                = pb.CurrentUserResp
	DeleteInterfaceInfoReq         = pb.DeleteInterfaceInfoReq
	DeleteInterfaceInfoResp        = pb.DeleteInterfaceInfoResp
	GetInterfaceInfoReq            = pb.GetInterfaceInfoReq
	GetInterfaceInfoResp           = pb.GetInterfaceInfoResp
	GetInvokeUserReq               = pb.GetInvokeUserReq
	GetInvokeUserResp              = pb.GetInvokeUserResp
	InterfaceInfo                  = pb.InterfaceInfo
	InvokeInterfaceInfoReq         = pb.InvokeInterfaceInfoReq
	InvokeInterfaceInfoResp        = pb.InvokeInterfaceInfoResp
	LoginReq                       = pb.LoginReq
	LoginResp                      = pb.LoginResp
	LogoutReq                      = pb.LogoutReq
	LogoutResp                     = pb.LogoutResp
	OfflineInterfaceInfoReq        = pb.OfflineInterfaceInfoReq
	OfflineInterfaceInfoResp       = pb.OfflineInterfaceInfoResp
	OnlineInterfaceInfoReq         = pb.OnlineInterfaceInfoReq
	OnlineInterfaceInfoResp        = pb.OnlineInterfaceInfoResp
	PageListReq                    = pb.PageListReq
	PageListResp                   = pb.PageListResp
	RegisterReq                    = pb.RegisterReq
	RegisterResp                   = pb.RegisterResp
	UpdateInterfaceInfoReq         = pb.UpdateInterfaceInfoReq
	UpdateInterfaceInfoResp        = pb.UpdateInterfaceInfoResp
	UpdateInvokeInterfaceCountReq  = pb.UpdateInvokeInterfaceCountReq
	UpdateInvokeInterfaceCountResp = pb.UpdateInvokeInterfaceCountResp
	User                           = pb.User

	UserZrpcClient interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		GetInvokeUser(ctx context.Context, in *GetInvokeUserReq, opts ...grpc.CallOption) (*GetInvokeUserResp, error)
	}

	defaultUserZrpcClient struct {
		cli zrpc.Client
	}
)

func NewUserZrpcClient(cli zrpc.Client) UserZrpcClient {
	return &defaultUserZrpcClient{
		cli: cli,
	}
}

func (m *defaultUserZrpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CurrentUser(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetInvokeUser(ctx context.Context, in *GetInvokeUserReq, opts ...grpc.CallOption) (*GetInvokeUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetInvokeUser(ctx, in, opts...)
}
