// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	analysis "gyu-api-backend/app/admin/api/internal/handler/analysis"
	interfaceInfo "gyu-api-backend/app/admin/api/internal/handler/interfaceInfo"
	user "gyu-api-backend/app/admin/api/internal/handler/user"
	"gyu-api-backend/app/admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/current",
				Handler: user.CurrentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/logout",
				Handler: user.LogoutHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/interfaceInfo/add",
				Handler: interfaceInfo.AddInterfaceInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/interfaceInfo/get",
				Handler: interfaceInfo.GetInterfaceInfoByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/interfaceInfo/list/page",
				Handler: interfaceInfo.GetPageListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/interfaceInfo/update",
				Handler: interfaceInfo.UpdateInterfaceInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/interfaceInfo/delete",
				Handler: interfaceInfo.DeleteInterfaceInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/interfaceInfo/online",
				Handler: interfaceInfo.OnlineInterfaceInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/interfaceInfo/offline",
				Handler: interfaceInfo.OfflineInterfaceInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/interfaceInfo/invoke",
				Handler: interfaceInfo.InvokeInterfaceInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/gyu_api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/analysis/top/interfaceInfo",
				Handler: analysis.GetTopNInterfaceInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/gyu_api/v1"),
	)
}
